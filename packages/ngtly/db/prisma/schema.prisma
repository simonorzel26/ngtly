// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    output        = "../../../../node_modules/@prisma/ngtlyClient"
    binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model Post {
    id      String @id @default(cuid())
    title   String
    content String
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver,
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Country {
    id     String @id @unique @default(cuid())
    name   String @unique
    cities City[]
}

model City {
    id            String          @id @unique @default(cuid())
    rank          Int
    name          String          @unique
    countryId     String
    country       Country         @relation(fields: [countryId], references: [id])
    population    Int
    timezone      DateTime
    clubs         Club[]
    PromotedEvent PromotedEvent[]
    BlogPosts     BlogPost[]
    BlogPostSeed  BlogPostSeed[]
}

model Club {
    id                String    @id @unique @default(cuid())
    name              String
    urlSlug           String    @unique
    cityId            String
    url               String    @unique
    furthestEventDate String?
    city              City      @relation(fields: [cityId], references: [id])
    events            Event[]
    lastScrapedAt     DateTime?
    locationId        String?   @unique
    location          Location? @relation(fields: [locationId], references: [id])

    @@unique([name, cityId])
}

model Location {
    id                       String   @id @default(cuid())
    fullAddress              String
    streetNumber             String?
    street                   String?
    city                     String?
    postalCode               String?
    country                  String?
    administrativeAreaLevel1 String?
    administrativeAreaLevel2 String?
    latitude                 Float
    longitude                Float
    placeId                  String   @unique
    types                    String[]
    locationType             String
    viewportNortheastLat     Float?
    viewportNortheastLng     Float?
    viewportSouthwestLat     Float?
    viewportSouthwestLng     Float?
    boundsNortheastLat       Float?
    boundsNortheastLng       Float?
    boundsSouthwestLat       Float?
    boundsSouthwestLng       Float?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    club                     Club?
}

model Event {
    id                      String          @id @unique @default(cuid())
    eventDate               String
    promoted                Boolean         @default(false)
    eventStartTime          String?
    name                    String
    entryPrice              Int
    musicTypesEnglish       String[]
    eventTypesEnglish       String[]
    partyTypesEnglish       String[]
    artists                 String[]
    shortEnglishDescription String
    longEnglishDescription  String          @default("")
    organizers              String[]
    clubName                String
    eventImage              String?
    generatedImage          String?
    imageInQueue            Boolean         @default(false)
    url                     String          @default("")
    city                    String          @default("")
    scrapedAt               DateTime        @default(now())
    club                    Club?           @relation(fields: [clubId], references: [id])
    clubId                  String?
    ticketsUrl              String?
    eventCaniconalUrl       String?
    PromotedEvent           PromotedEvent[]
    ReportedEvent           ReportedEvent[]
    EventMusicTag           EventMusicTag[]
    EventEventTag           EventEventTag[]

    @@unique([clubName, eventDate])
}

enum BatchType {
    CLUB
    EVENT
}

model BatchAwaiter {
    id          String    @id @default(cuid())
    batchId     String
    batchStatus String    @default("validating")
    batchType   BatchType @default(CLUB)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model GptResponse {
    id        String   @id @default(cuid())
    response  Json
    valid     Boolean  @default(true)
    inserted  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PromotedEvent {
    id              String   @id @unique @default(cuid())
    promotionDate   DateTime
    stripePaymentId String
    paid            Boolean  @default(false)
    eventId         String
    event           Event    @relation(fields: [eventId], references: [id])
    cityId          String
    city            City     @relation(fields: [cityId], references: [id])
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@unique([promotionDate, cityId])
}

model PotentialClubUrl {
    id        String   @id @default(cuid())
    url       String
    city      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ReportedEvent {
    id        String   @id @default(cuid())
    eventId   String
    event     Event    @relation(fields: [eventId], references: [id])
    reason    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MusicTag {
    id            String          @id @unique @default(cuid())
    name          String          @unique
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    EventMusicTag EventMusicTag[]

    @@index([name])
}

model EventMusicTag {
    eventId    String
    musicTagId String
    event      Event    @relation(fields: [eventId], references: [id])
    musicTag   MusicTag @relation(fields: [musicTagId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([eventId, musicTagId])
    @@unique([eventId, musicTagId])
    @@index([eventId])
    @@index([musicTagId])
}

model EventTag {
    id            String          @id @unique @default(cuid())
    name          String          @unique
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    EventEventTag EventEventTag[]

    @@index([name])
}

model EventEventTag {
    eventId    String
    eventTagId String
    event      Event    @relation(fields: [eventId], references: [id])
    eventTag   EventTag @relation(fields: [eventTagId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([eventId, eventTagId])
    @@unique([eventId, eventTagId])
    @@index([eventId])
    @@index([eventTagId])
}

model BlogPost {
    id                   String   @id @default(uuid())
    title                String
    slug                 String   @unique
    content              Json
    author               String
    authorName           String
    publisherName        String
    description          String   @db.Text
    thumbnailUrl         String?  @db.VarChar(2083)
    tags                 String[]
    keywords             String[]
    views                Int      @default(0)
    wordCount            Int
    interactionStatistic Json
    isAccessibleForFree  Boolean  @default(true)
    cityId               String
    city                 City     @relation(fields: [cityId], references: [id])

    relatedBlogPosts String[]

    language Language @default(EN)

    createdAt     DateTime @default(now())
    datePublished DateTime
    dateModified  DateTime @updatedAt
    updatedAt     DateTime @updatedAt
    published     Boolean  @default(false)

    blogPostSeed   BlogPostSeed @relation(fields: [blogPostSeedId], references: [id])
    blogPostSeedId String

    @@unique([blogPostSeedId])
}

model BlogPostSeed {
    id       String   @id @default(uuid())
    language Language @default(EN)

    longTailKeyword String
    cityId          String
    city            City   @relation(fields: [cityId], references: [id])

    BlogPost BlogPost[]

    @@unique([cityId, language, longTailKeyword])
}

enum Language {
    EN
    DE
    FR
    ES
}
